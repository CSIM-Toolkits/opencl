

#Linux OS  (TEST OK)
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
   MESSAGE(${CMAKE_SYSTEM})
   SET(OperatingSystem "LINUX")


  find_path(
    OPENCL_INCLUDE_DIRS
    NAMES CL/cl.hpp OpenCL/cl.hpp
    )

  find_library(
    OPENCL_LIBRARIES
    NAMES OpenCL
    )

ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

#Apple OS (NOT TESTED)
IF (APPLE)
	MESSAGE(${CMAKE_SYSTEM})
	SET(OperatingSystem "Apple")

	# IF OpenCL_LIBPATH is given use it and don't use default path
	IF (DEFINED ENV{OpenCL_LIBPATH})
		FIND_LIBRARY(OPENCL_LIBRARIES OpenCL PATHS ENV OpenCL_LIBPATH NO_DEFAULT_PATH)
	ELSE ()
		FIND_LIBRARY(OPENCL_LIBRARIES OpenCL DOC "OpenCL lib for OSX")
	ENDIF ()

	# IF OpenCL_INCPATH is given use it and find for CL/cl.h and OpenCL/cl.h do not try to find default paths
	IF (DEFINED ENV{OpenCL_INCPATH})
		FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h OpenCL/cl.h PATHS ENV OpenCL_INCPATH NO_DEFAULT_PATH)
		FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp OpenCL/cl.hpp PATHS ${OPENCL_INCLUDE_DIRS} NO_DEFAULT_PATH)
	ELSE ()
		FIND_PATH(OPENCL_INCLUDE_DIRS OpenCL/cl.h DOC "Include for OpenCL on OSX")
		FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC "Include for OpenCL CPP bindings on OSX")
	ENDIF ()

ENDIF (APPLE)


#Windows(NOTE TESTED)
IF (WIN32)

	MESSAGE(${CMAKE_SYSTEM})
	SET(OperatingSystem "Windows")	

		# Find OpenCL includes and libraries from environment variables provided by vendor
		SET(OPENCL_INCLUDE_SEARCH_PATHS)
		SET(OPENCL_LIBRARY_SEARCH_PATHS)
		SET(OPENCL_LIBRARY_64_SEARCH_PATHS)

		# Nvidia
		IF (DEFINED ENV{CUDA_INC_PATH})
			SET(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} $ENV{CUDA_INC_PATH})
			SET(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} $ENV{CUDA_LIB_PATH}/../lib64)
			SET(OPENCL_LIBRARY_SEARCH_PATHS ${OPENCL_LIBRARY_SEARCH_PATHS} $ENV{CUDA_LIB_PATH}/../lib)
		ENDIF()

		# Intel SDK
		IF (DEFINED ENV{INTELOCSDKROOT})
			SET(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} $ENV{INTELOCSDKROOT}/include)
			SET(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} $ENV{INTELOCSDKROOT}/lib/x64)
			SET(OPENCL_LIBRARY_SEARCH_PATHS ${OPENCL_LIBRARY_SEARCH_PATHS} $ENV{INTELOCSDKROOT}/lib/x86)
		ENDIF()

		# AMD SDK
		IF (DEFINED ENV{AMDAPPSDKROOT})
			SET(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} $ENV{AMDAPPSDKROOT}/include)
			SET(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} $ENV{AMDAPPSDKROOT}/lib/x86_64)
			SET(OPENCL_LIBRARY_SEARCH_PATHS ${OPENCL_LIBRARY_SEARCH_PATHS} $ENV{AMDAPPSDKROOT}/lib/x86)
		ENDIF()

		# Override search paths with OpenCL_INCPATH env variable
		IF (DEFINED ENV{OpenCL_INCPATH})
			SET(OPENCL_INCLUDE_SEARCH_PATHS $ENV{OpenCL_INCPATH})
		ENDIF ()

		# Override search paths with OpenCL_LIBPATH env variable
		IF (DEFINED ENV{OpenCL_INCPATH})
			SET(OPENCL_LIBRARY_SEARCH_PATHS $ENV{OpenCL_LIBPATH})
			SET(OPENCL_LIBRARY_64_SEARCH_PATHS $ENV{OpenCL_LIBPATH})
		ENDIF ()

		FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h PATHS ${OPENCL_INCLUDE_SEARCH_PATHS})
		FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp PATHS ${OPENCL_INCLUDE_SEARCH_PATHS})
		
		FIND_LIBRARY(_OPENCL_32_LIBRARIES OpenCL.lib HINTS ${OPENCL_LIBRARY_SEARCH_PATHS} PATHS ${OPENCL_LIB_DIR} ENV PATH)
		FIND_LIBRARY(_OPENCL_64_LIBRARIES OpenCL.lib HINTS ${OPENCL_LIBRARY_64_SEARCH_PATHS} PATHS ${OPENCL_LIB_DIR} ENV PATH)

		# Check if 64bit or 32bit versions links fine
  		SET (_OPENCL_VERSION_SOURCE "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/openclversion.c")
  		#SET (_OPENCL_VERSION_SOURCE "${CMAKE_BINARY_DIR}/test.c")
		FILE (WRITE "${_OPENCL_VERSION_SOURCE}"
			"
			#if __APPLE__
			#include <OpenCL/cl.h>
			#else /* !__APPLE__ */
			#include <CL/cl.h>
			#endif /* __APPLE__ */
			int main()
			{	
			    cl_int result;
			    cl_platform_id id;
			    result = clGetPlatformIDs(1, &id, NULL);
			    return result != CL_SUCCESS;
			}
			")

  		TRY_COMPILE(_OPENCL_64_COMPILE_SUCCESS ${CMAKE_BINARY_DIR} "${_OPENCL_VERSION_SOURCE}"
			CMAKE_FLAGS
			"-DINCLUDE_DIRECTORIES:STRING=${OPENCL_INCLUDE_DIRS}"
			CMAKE_FLAGS
			"-DLINK_LIBRARIES:STRING=${_OPENCL_64_LIBRARIES}"
  		)

		IF(_OPENCL_64_COMPILE_SUCCESS)
			message(STATUS "OpenCL 64bit lib found.")
			SET(OPENCL_LIBRARIES ${_OPENCL_64_LIBRARIES})
  		ELSE()
	  		TRY_COMPILE(_OPENCL_32_COMPILE_SUCCESS ${CMAKE_BINARY_DIR} "${_OPENCL_VERSION_SOURCE}"
				CMAKE_FLAGS
				"-DINCLUDE_DIRECTORIES:STRING=${OPENCL_INCLUDE_DIRS}"
				CMAKE_FLAGS
				"-DLINK_LIBRARIES:STRING=${_OPENCL_32_LIBRARIES}"
	  		)
			IF(_OPENCL_32_COMPILE_SUCCESS)
				message(STATUS "OpenCL 32bit lib found.")
				SET(OPENCL_LIBRARIES ${_OPENCL_32_LIBRARIES})
			ELSE()
				message(STATUS "Couldn't link opencl..")
			ENDIF()
		ENDIF()
ENDIF (WIN32)


include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
  OPENCL
  DEFAULT_MSG
  OPENCL_LIBRARIES OPENCL_INCLUDE_DIRS
  )




